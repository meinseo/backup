function sns_share(sns, comTitle){
	var sUrl = encodeURIComponent(window.location.href);
	console.log("url : " + window.location.href);
	console.log("comTitle : " + comTitle);
	
	var sTitle = encodeURIComponent($("title").text());
	if(comTitle != "" && comTitle != null){
		sTitle = encodeURIComponent(comTitle);
	}
	console.log("sTitle decode: " + decodeURIComponent(sTitle));
	
	switch(sns){
		case "facebook" :
			url = 'http://www.facebook.com/sharer/sharer.php?u=' + sUrl;
			window.open(url , "_blank", 'width=600,height=400,resizable=yes,scrollbars=yes');
			//console.log("(snsTest) 공유sns? : " + sns + ", 공유 url은? : " + url);
			break;
		
		case "twitter" :
			url = 'http://twitter.com/intent/tweet?text=' + sTitle + '&url=' + sUrl;
			window.open(url , "_blank", 'width=600,height=400,resizable=yes,scrollbars=yes');
			//console.log("(snsTest) 공유sns? : " + sns + ", 공유 url은? : " + url);
			break;
			
		default:
			alert("지원하지 않는 SNS입니다.");
			return false;
	}
	
	snsShareAa(sns, sTitle);
	
};

//저장될 쿠키명 , 쿠키 value값 , 기간( ex. 1은 하루, 7은 일주일)
function setCookie( name, value, expiredays ) { 
	var todayDate = new Date(); 
	todayDate.setTime(todayDate.getTime() + expiredays * 60 * 60 * 24 * 1000);
	document.cookie = name + '=' + value + ';expires=' + todayDate.toUTCString() + ';path=/';
};

//저장한 쿠키명
function getCookie(name) {
    var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
    return value? value[2] : null;
};


(function(extension){

	extension.getProperties = function(data){

    	return $('[data-' + data + ']').attr('data-' + data);
    };

    extension.api = function( attr ){

        var method = "post";
        if( attr.method ) method = attr.method;
        return $.ajax({
            url : attr.url,
            dataType:"json",
            method:method,
            data:attr.param
        });
    };


    extension.YYYYMMDDHHMMSS = function(){
    	function pad2(n) {  // always returns a string
            return (n < 10 ? '0' : '') + n;
        }
    	var date = new Date();
        return date.getFullYear() +
               pad2(date.getMonth() + 1) +
               pad2(date.getDate()) +
               pad2(date.getHours()) +
               pad2(date.getMinutes()) +
               pad2(date.getSeconds());
    };

    extension.loadTemplate = function(id) {
    	return document.getElementById(id).innerHTML;
    };

    extension.replaceTemplate = function(templateStr, data) {
    	var result = templateStr;
    	for (var key in data) {
    		result = result.split('{{' + key + '}}').join(data[key]);
    	}
    	result = result.replace(/{{(.*?)}}/g, ''); //.replace(/{{[^{{|}}]*}}/g, '');
    	return result;
    };

    extension.removeSpace = function(str){
    	var res = '';
    	if(str){
    		res = str.replace(/(\s*)/g, '');
    	}
    	return res;
    };

    extension.updateURLParameter = function(url, param, paramVal){
   	    var TheAnchor = null;
   	    var newAdditionalURL = "";
   	    var tempArray = url.split("?");
   	    var baseURL = tempArray[0];
   	    var additionalURL = tempArray[1];
   	    var temp = "";

   	    var resultUrl = "";

   	    if (additionalURL)
   	    {
   	        var tmpAnchor = additionalURL.split("#");
   	        var TheParams = tmpAnchor[0];
   	            TheAnchor = tmpAnchor[1];
   	        if(TheAnchor)
   	            additionalURL = TheParams;

   	        tempArray = additionalURL.split("&");

   	        for (var i=0; i<tempArray.length; i++)
   	        {
   	            if(tempArray[i].split('=')[0] != param)
   	            {
   	                newAdditionalURL += temp + tempArray[i];
   	                temp = "&";
   	            }
   	        }
   	    }
   	    else
   	    {
   	        var tmpAnchor = baseURL.split("#");
   	        var TheParams = tmpAnchor[0];
   	            TheAnchor  = tmpAnchor[1];

   	        if(TheParams)
   	            baseURL = TheParams;
   	    }

   	    if(TheAnchor && paramVal != "")
   	        paramVal += "#" + TheAnchor;

   	    if(paramVal != "") {
   	    	var rows_txt = temp + "" + param + "=" + paramVal;
   	    	resultUrl = baseURL + "?" + newAdditionalURL + rows_txt;
   	    }else{
   	    	resultUrl = baseURL + "?" + newAdditionalURL;
   	    }

   	    return resultUrl;
   	};

   	extension.nvl = function(A, B){

    	function isNull(value) {
    	      var _chkStr = value + "";
    	      if(_chkStr==""||_chkStr==null||_chkStr=="null"){return true;}
    	      return false;
    	}

    	function isUndefined(value) {
    	     if(typeof(value)==undefined || typeof(value)=="undefined" || value=="undefined" || value==undefined) {return true;}
    	     return false;
    	}

    	if(isNull(B) || isUndefined(B)){
    		B = '';
    	}

    	if(isNull(A) || isUndefined(A)){
    		return B;
    	}else{
    		return A;
    	}
    };

    extension.registerHelper = function(){

    	Handlebars.registerHelper('character', function(id, url) {
    		return String.fromCharCode( 65+id );
    	});
    	Handlebars.registerHelper('stringify', function(data, url) {
    		return JSON.stringify( data );
    	});
    	Handlebars.registerHelper('if_eq', function(a, b, opts) {
    	    if(a == b) // Or === depending on your needs
    	        return opts.fn(this);
    	    else
    	        return opts.inverse(this);
    	});
    	Handlebars.registerHelper('if_index', function(a, b, opts) {
    	    if(a && a.indexOf(b) > -1)
    	        return opts.fn(this);
    	    else
    	        return opts.inverse(this);
    	});
    	Handlebars.registerHelper('loop', function(a, b, opts) {
    		var el = "";
    		//console.log( a, b );
    		for(var i = a; i<=+b; i++ ){
    			opts.data.index = i;
    			el += opts.fn(this);
    		}
    		return el;
    	});
    	Handlebars.registerHelper("math", function(lvalue, operator, rvalue, options) {
    	    lvalue = parseFloat(lvalue);
    	    rvalue = parseFloat(rvalue);

    	    return {
    	        "+": lvalue + rvalue,
    	        "-": lvalue - rvalue,
    	        "*": lvalue * rvalue,
    	        "/": lvalue / rvalue,
    	        "%": lvalue % rvalue
    	    }[operator];
    	});
    	Handlebars.registerHelper("paging", function(a, opts) {

    	    return "";
    	});
    	Handlebars.registerHelper("tel", function(a, opts) {
    		a = a.split("-").join("");
    		a = a.replace(/\s/g, "");
    		//var b = ( a.length == 9 ) ? a.replace(/(\d{2})(\d{3})(\d{4})/g, "$1-$2-$3") : a.replace(/\d{3}\d{4}\d{4}/g, "$1-$2-$3");
    		var b = "";
    		if( a.length == 9){
    			b = a.replace(/(\d{2})(\d{3})(\d{4})/g, "$1-$2-$3")
    		}
    		if( a.length == 10){
    			b = a.replace(/(\d{3})(\d{3})(\d{4})/g, "$1-$2-$3")
    		}
    		if( a.length == 11){
    			b = a.replace(/(\d{3})(\d{4})(\d{4})/g, "$1-$2-$3")
    		}

    		if( a.length == 10 && a.substring(0,2) =="02"){
    			b = a.replace(/(\d{2})(\d{4})(\d{4})/g, "$1-$2-$3")
    		}
    	    return b;
    	});
    	Handlebars.registerHelper("date_format", function(a, opts) {
    	    return a.replace(/([0-9]{4})([0-9]{2})([0-9]{2})/, "$1.$2.$3");
    	});
    	Handlebars.registerHelper("split", function(a, b) {
    		return a.split(b);
    	});
    	Handlebars.registerHelper("timFilter", function(a) {

    		if(a){
    			if(a == '1'){
    				return '오전';
    			}
    			if(a == '2'){
    				return '오후';
    			}
	    		if(a.length > 3){
	    			return a.substring(0, 2) + ':' + a.substring(2);
	    		}
    		}
    		return a;
    	});
    	Handlebars.registerHelper("date_format2", function(num) {

    		if(!num) return "";

    	     var formatNum = '';

    	     num=num.replace(/\s/gi, "");

    	     try{

    	          if(num.length == 8) {

    	               formatNum = num.replace(/(\d{4})(\d{2})(\d{2})/, '$1년 $2월 $3일');
    	          }
    	     } catch(e) {

    	          formatNum = num;
    	          console.log(e);
    	     }

    	     return formatNum;
    	});
    	Handlebars.registerHelper("time_format", function(a) {

    		if(!a) return "";

    		return a.substring(0, 2) + '시'
    	});
    };

})(window.extension = window.extension || {});

//for AdobeAnalytics
function compoVideo(pType, url, model){
	var type = "";
	if(model.length > 0){
		type = "PIP"
	}
	
	var param = {event:{
		eventName : "VIDEO_"+pType.toUpperCase(), 
		eventAction : url,
		modelName : model,
		type : type,
		externalLink : ""
	}};

	aaTrackEvent(param);
}

//for AdobeAnalytics
function snsShareAa(type, title){
	var param = {event:{
		eventName : "SOCIAL_SHARE", 
		eventAction : title,
		type : type,
		modelName : "",
		externalLink : ""
	}};

	aaTrackEvent(param);
}

function parseUri (str) {
	var	o   = parseUri.options,
		m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
		uri = {},
		i   = 14;

	while (i--) uri[o.key[i]] = m[i] || "";

	uri[o.q.name] = {};
	uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
		if ($1) uri[o.q.name][$1] = $2;
	});

	return uri;
};

parseUri.options = {
	strictMode: false,
	key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
	q:   {
		name:   "queryKey",
		parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	},
	parser: {
		strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
		loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	}
};

//for AdobeAnalytics
function aaTrackEvent(params){
	console.log(" aaTrackEvent : ", params);
	try{
		return  _trackEvent( params );
	}catch(e){
		console.log("aaTrackEvent : ", e);
		return {};
	}
};


